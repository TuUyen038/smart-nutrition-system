// analyzeController.js (T·ªëi ∆∞u h√≥a)
const fs = require('fs');
// S·ª≠a import: L·∫•y t·∫•t c·∫£ c√°c h√†m m·ªõi
const { 
  identifyFoodName, 
  getRecipe, 
  calculateNutrition, 
  getSubstitutionsAndWarnings 
} = require('../utils/ai_providers/aiInterface'); 
const Analysis = require('../models/Analysis');

// H√†m ch√≠nh x·ª≠ l√Ω logic ph√¢n t√≠ch
const findRecipe = async (req, res, next) => {
  const imageFile = req.file; 
  const modelToUse = req.body.model || 'gemini-2.5-flash'; // ƒê·∫∑t model m·∫∑c ƒë·ªãnh r√µ r√†ng h∆°n
  
  // ƒê·ªëi t∆∞·ª£ng JSON k·∫øt qu·∫£ ph√¢n t√≠ch cu·ªëi c√πng
  let finalAnalysisResult = {
      foodName: "Kh√¥ng x√°c ƒë·ªãnh",
      recipe: null,
      nutrition: null,
      suggestions: null,
      warnings: null
  }; 
  
  // ƒê·∫ßu v√†o t√πy ch·ªçn cho h√†m 4
  const userRestrictions = req.body.restrictions || 'Ng∆∞·ªùi ƒÉn ki√™ng, Ng∆∞·ªùi cao huy·∫øt √°p, Ng∆∞·ªùi ti·ªÉu ƒë∆∞·ªùng'; 

  // H√†m Parse an to√†n v√† lo·∫°i b·ªè k√Ω t·ª± kh√¥ng mong mu·ªën (```json)
  const safeParse = (text, defaultVal = {}) => {
      if (typeof text !== 'string') return defaultVal;
      try {
          return JSON.parse(text.replace(/```json|```/g, '').trim());
      } catch (e) {
          console.warn(`‚ö†Ô∏è L·ªói Parse JSON: ${e.message}. Tr·∫£ v·ªÅ gi√° tr·ªã m·∫∑c ƒë·ªãnh.`);
          // Tr·∫£ v·ªÅ m·ªôt ƒë·ªëi t∆∞·ª£ng ch·ª©a chu·ªói th√¥ ƒë·ªÉ debug, n·∫øu parse l·ªói
          return { error: `L·ªói Parse JSON: ${e.message}`, rawText: text };
      }
  };

  if (!imageFile) {
    return res.status(400).json({ message: 'Vui l√≤ng cung c·∫•p file ·∫£nh.' });
  }

  try {
    // ---------------------------------------------------------------------
    // üß† B∆Ø·ªöC 1: NH·∫¨N DI·ªÜN M√ìN ƒÇN (Tu·∫ßn t·ª± - S·ª¨ D·ª§NG H√ÄM M·ªöI)
    // ---------------------------------------------------------------------
    console.log('1. B·∫Øt ƒë·∫ßu nh·∫≠n di·ªán m√≥n ƒÉn...');
    
    // S·ª≠ d·ª•ng h√†m identifyFoodName t·ª´ aiInterface
    const detectionJsonString = await identifyFoodName(imageFile);
    const parsedDetection = safeParse(detectionJsonString);
    
    // Tr√≠ch xu·∫•t T√™n m√≥n ƒÉn
    let foodName = parsedDetection.foodName || "Kh√¥ng x√°c ƒë·ªãnh";
    finalAnalysisResult.foodName = foodName;
    
    if (foodName === "Kh√¥ng x√°c ƒë·ªãnh" || parsedDetection.error) {
        return res.status(400).json({ 
            success: false, 
            message: "Kh√¥ng th·ªÉ nh·∫≠n di·ªán m√≥n ƒÉn trong h√¨nh ·∫£nh.",
            rawDetection: parsedDetection 
        });
    }
    
    console.log(`üçú M√≥n ƒÉn ƒë∆∞·ª£c nh·∫≠n di·ªán: **${foodName}**`);
    res.status(200).json({
      success: true,
      foodName: foodName
    });
    // ---------------------------------------------------------------------
    // üß© B∆Ø·ªöC 2: PH√ÇN T√çCH CHUY√äN S√ÇU (Song song - S·ª¨ D·ª§NG C√ÅC H√ÄM M·ªöI)
    // ---------------------------------------------------------------------
    // console.log('2. B·∫Øt ƒë·∫ßu ph√¢n t√≠ch c√¥ng th·ª©c, dinh d∆∞·ª°ng, v√† l·ªùi khuy√™n (Song song)...');
    
    // const [recipeRes, nutritionRes, adviceRes] = await Promise.allSettled([
    //   getRecipe(foodName), 
    //   calculateNutrition(foodName), // Gi·∫£ s·ª≠ h√†m 3 ƒë∆∞·ª£c s·ª≠a l·∫°i ƒë·ªÉ ch·∫•p nh·∫≠n t√™n m√≥n
    //   getSubstitutionsAndWarnings(foodName, userRestrictions), 
    // ]);
    // console.log('K·∫øt qu·∫£ b∆∞·ªõc 2:', recipeRes, nutritionRes, adviceRes);
    // // ---------------------------------------------------------------------
    // // üíæ B∆Ø·ªöC 3: X·ª¨ L√ù V√Ä L∆ØU K·∫æT QU·∫¢ (Parse v√† G√°n)
    // // ---------------------------------------------------------------------
    
    // // L·∫•y gi√° tr·ªã chu·ªói JSON ho·∫∑c chu·ªói l·ªói
    // const getResultValue = (result) => result.status === 'fulfilled' ? result.value : JSON.stringify({ error: result.reason?.message || 'Kh√¥ng r√µ l·ªói' });
    
    // // 1. C√¥ng th·ª©c (recipe)
    // finalAnalysisResult.recipe = safeParse(getResultValue(recipeRes));
    
    // // 2. Dinh d∆∞·ª°ng (totalNutrition)
    // finalAnalysisResult.nutrition = safeParse(getResultValue(nutritionRes));
    
    // // 3. G·ª£i √Ω & C·∫£nh b√°o (suggestions/warnings)
    // const adviceParsed = safeParse(getResultValue(adviceRes));
    // finalAnalysisResult.suggestions = adviceParsed.substitutions || adviceParsed;
    // finalAnalysisResult.warnings = adviceParsed.warnings || [];

    // // L∆∞u k·∫øt qu·∫£ HO√ÄN CH·ªàNH v√†o MongoDB
    // const newAnalysis = new Analysis({
    //   inputImagePath: imageFile.path, 
    //   modelUsed: modelToUse,
    //   // L∆∞u to√†n b·ªô ƒë·ªëi t∆∞·ª£ng ƒë√£ ƒë∆∞·ª£c parse (ch·ªâ 1 l·∫ßn stringify cu·ªëi c√πng)
    //   analysisResult: JSON.stringify(finalAnalysisResult), 
    //   createdAt: new Date(),
    // });
    
    // await newAnalysis.save();
    // console.log(`‚úÖ L∆∞u ph√¢n t√≠ch th√†nh c√¥ng: ${newAnalysis._id}`);

    // // ---------------------------------------------------------------------
    // // ‚úÖ B∆Ø·ªöC 4: TR·∫¢ V·ªÄ PH·∫¢N H·ªíI
    // // ---------------------------------------------------------------------
    // res.status(200).json({
    //   success: true,
    //   model: modelToUse,
    //   // Tr·∫£ v·ªÅ ƒë·ªëi t∆∞·ª£ng JS ƒë√£ ho√†n ch·ªânh, Frontend ch·ªâ c·∫ßn parse Response body 1 l·∫ßn.
    //   analysis: finalAnalysisResult
    // });

  } catch (error) {
    console.error("üö® Global Error:", error);
    // N·∫øu c√≥ l·ªói, lu√¥n d·ªçn d·∫πp v√† g·ªçi next() ƒë·ªÉ middleware x·ª≠ l√Ω l·ªói
    next(error); 
  } finally {
    // üßπ D·ªçn file t·∫°m
    if (imageFile && fs.existsSync(imageFile.path)) {
      fs.unlink(imageFile.path, (err) => {
          if (err) console.error("L·ªói khi x√≥a file t·∫°m:", err);
      });
    }
  }
};

const detectImage = async (req, res, next) => {
  const imageFile = req.file; 
  const modelToUse = req.body.model || 'gemini-2.5-flash'; // ƒê·∫∑t model m·∫∑c ƒë·ªãnh r√µ r√†ng h∆°n
  
  let foodName;
  
  // H√†m Parse an to√†n v√† lo·∫°i b·ªè k√Ω t·ª± kh√¥ng mong mu·ªën (```json)
  const safeParse = (text, defaultVal = {}) => {
      if (typeof text !== 'string') return defaultVal;
      try {
          return JSON.parse(text.replace(/```json|```/g, '').trim());
      } catch (e) {
          console.warn(`‚ö†Ô∏è L·ªói Parse JSON: ${e.message}. Tr·∫£ v·ªÅ gi√° tr·ªã m·∫∑c ƒë·ªãnh.`);
          // Tr·∫£ v·ªÅ m·ªôt ƒë·ªëi t∆∞·ª£ng ch·ª©a chu·ªói th√¥ ƒë·ªÉ debug, n·∫øu parse l·ªói
          return { error: `L·ªói Parse JSON: ${e.message}`, rawText: text };
      }
  };

  if (!imageFile) {
    return res.status(400).json({ message: 'Vui l√≤ng cung c·∫•p file ·∫£nh.' });
  }

  try {
    console.log('1. B·∫Øt ƒë·∫ßu nh·∫≠n di·ªán m√≥n ƒÉn...');
    
    const detectionJsonString = await identifyFoodName(imageFile);
    const parsedDetection = safeParse(detectionJsonString);
    
    // Tr√≠ch xu·∫•t T√™n m√≥n ƒÉn
    foodName = parsedDetection.foodName || "Kh√¥ng x√°c ƒë·ªãnh";
    
    if (foodName === "Kh√¥ng x√°c ƒë·ªãnh" || parsedDetection.error) {
        return res.status(400).json({ 
            message: "Kh√¥ng th·ªÉ nh·∫≠n di·ªán m√≥n ƒÉn trong h√¨nh ·∫£nh.",
            rawDetection: parsedDetection 
        });
    }
    
    console.log(`üçú M√≥n ƒÉn ƒë∆∞·ª£c nh·∫≠n di·ªán: **${foodName}**`);
    res.status(200).json({
      foodName: foodName
    });
  } catch (error) {
    console.error("üö® Global Error:", error);
    // N·∫øu c√≥ l·ªói, lu√¥n d·ªçn d·∫πp v√† g·ªçi next() ƒë·ªÉ middleware x·ª≠ l√Ω l·ªói
    next(error); 
  } finally {
    // D·ªçn file t·∫°m
    if (imageFile && fs.existsSync(imageFile.path)) {
      fs.unlink(imageFile.path, (err) => {
          if (err) console.error("L·ªói khi x√≥a file t·∫°m:", err);
      });
    }
  }
};

module.exports = { findRecipe, detectImage };